import csv
import gamesList

gamesList = gamesList.gamesList("KasparovFirst10Pages.pgn")

def main():
    with open('PGNGames.csv', 'w', newline='') as f:
        #Tags soured from http://www.saremba.de/chessgml/standards/pgn/pgn-complete.htm#c9.9.2
        fieldNames = [
              'Event',
              'Site',
              'Date',
              'Round',
              'White',
              'Black',
              'Result',
              'WhiteTitle',
              'BlackTitle',
              'WhiteElo',
              'BlackElo',
              'WhiteUSCF',
              'BlackUSCF',
              'WhiteNA',
              'BlackNA',
              'WhiteType',
              'BlackType',
              'EventDate',
              'EventSponsor',
              'Section',
              'Stage',
              'Board',
              'Opening',
              'Variation',
              'SubVariation',
              'ECO',
              'NIC',
              'Time',
              'UTCTime',
              'UTCDate',
              'TimeControl',
              'SetUp',
              'FEN',
              'Termination',
              'Annotator',
              'Mode',
              'PlyCount',
              # The ones below not included in http://www.saremba.de/chessgml/standards/pgn/pgn-complete.htm#c9.9.2
              'WhiteFideId',
              'BlackFideId',
              'EventType',
              'EventRounds',
              'EventCountry',
              'Source',
              'SourceDate',
              'Moves' #Here are the moves!
              ]
        theWriter = csv.DictWriter(f, fieldnames=fieldNames)
        theWriter.writeheader()
        for s in gamesList:
            theWriter.writerow({
                'Event' : s[0]['Event'],
                'Site' : s[0]['Site'],
                'Date' : s[0]['Date'],
                'Round' : s[0]['Round'],
                'White' : s[0]['White'],
                'Black' : s[0]['Black'],
                'Result' : s[0]['Result'],
                'WhiteTitle' : s[0]['WhiteTitle'],
                'BlackTitle' : s[0]['BlackTitle'],
                'WhiteElo' : s[0]['WhiteElo'],
                'BlackElo' : s[0]['BlackElo'],
                'WhiteUSCF' : s[0]['WhiteUSCF'],
                'BlackUSCF' : s[0]['BlackUSCF'],
                'WhiteNA' : s[0]['WhiteNA'],
                'BlackNA' : s[0]['BlackNA'],
                'WhiteType' : s[0]['WhiteType'],
                'BlackType' : s[0]['BlackType'],
                'EventDate': s[0]['EventDate'],
                'EventSponsor' : s[0]['EventSponsor'],
                'Section' : s[0]['Section'],
                'Stage' : s[0]['Stage'],
                'Board' : s[0]['Board'],
                'Opening': s[0]['Opening'],
                'Variation': s[0]['Variation'],
                'SubVariation' : s[0]['SubVariation'],
                'ECO' : s[0]['ECO'],
                'NIC' : s[0]['NIC'],
                'Time' : s[0]['Time'],
                'UTCTime' : s[0]['UTCTime'],
                'UTCDate' : s[0]['UTCDate'],
                'TimeControl' : s[0]['TimeControl'],
                'SetUp' : s[0]['SetUp'],
                'FEN' : s[0]['FEN'],
                'Termination' : s[0]['Termination'],
                'Annotator' : s[0]['Annotator'],
                'Mode' : s[0]['Mode'],
                'PlyCount' : s[0]['PlyCount'],
                'WhiteFideId' : s[0]['WhiteFideId'],
                'BlackFideId' : s[0]['BlackFideId'],
                'EventType' : s[0]['EventType'],
                'EventRounds' : s[0]['EventRounds'],
                'EventCountry' : s[0]['EventCountry'],
                'Source' : s[0]['Source'],
                'SourceDate' : s[0]['SourceDate'],
                'Moves' : s[1]
                })

if __name__ == "__main__":
    main()
